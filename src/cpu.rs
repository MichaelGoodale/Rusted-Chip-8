pub struct Cpu {
	ram:[u8; 4096],
	v:[u8; 16],
	opcode:u16,
	i:u16,
	pc:u8,

	delay_timer:u8,
	sound_timer:u8,

	gfx:[[bool;32];64],
}

impl Cpu {
	fn fonts() -> [u8; 80] {
		[ 
		  0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
		  0x20, 0x60, 0x20, 0x20, 0x70, // 1
		  0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
		  0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
		  0x90, 0x90, 0xF0, 0x10, 0x10, // 4
		  0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
		  0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
		  0xF0, 0x10, 0x20, 0x40, 0x40, // 7
		  0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
		  0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
		  0xF0, 0x90, 0xF0, 0x90, 0x90, // A
		  0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
		  0xF0, 0x80, 0x80, 0x80, 0xF0, // C
		  0xE0, 0x90, 0x90, 0x90, 0xE0, // D
		  0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
		  0xF0, 0x80, 0xF0, 0x80, 0x80  // F
		]
	}
	
	pub fn reset(&mut self) {
		self.ram= [0; 4096];
		self.v= [0; 16];
		self.opcode=0;
		self.i=0;
		self.pc=0;
		
		self.delay_timer=0;
		self.sound_timer=0;
		for i in 0 .. 80 {
			self.ram[i]=Cpu::fonts()[i];
		}
		self.gfx = [[false;32];64];
	}

	pub fn new() -> Cpu {
		let mut c = Cpu {
			ram: [0; 4096],
			v: [0; 16],
			opcode: 0,
			i: 0,
			pc: 0,

			delay_timer: 0,
			sound_timer: 0,
			gfx: [[false;32];64],
		};
		c.reset();
		c
	}
	
	pub fn get_gfx(&self) -> [[bool;32];64]{
		self.gfx
	}
	
	pub fn print_ram(&self, min:usize, max:usize){
		for i in min .. max {
			println!("{}",self.ram[i]);
		}
	}

}
